{"version":3,"sources":["../src lazy /^/actionsData.*/.js$/ groupOptions: {} namespace object","HtmlDialog.js","App.js","reportWebVitals.js","index.js"],"names":["map","./actionsData1.js","./actionsData2.js","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","HtmlDialog","_ref","onSubmit","textRef","useRef","useEffect","current","focus","React","createElement","preventDefault","text","value","ref","rows","cols","type","style","padding","fontSize","backgroundColor","color","border","borderRadius","cursor","VariantDialog","variantText","setVariantText","useState","className","display","alignItems","marginRight","onChange","target","width","onClick","handleSubmit","App","submittedText","setSubmittedText","selectedActions","setSelectedActions","executedActions","setExecutedActions","showActions","setShowActions","displayResult","setDisplayResult","variantDialogVisible","setVariantDialogVisible","actionResults","setActionResults","variantCount","setVariantCount","actionsData","setActionsData","version","URLSearchParams","window","location","search","get","concat","default","catch","err","console","error","handleCheckboxChange","actionNo","parseInt","checked","filter","no","functionsMap","proposeVariants","Router","log","copyToClipboard","actionsChosen","index","action","find","actionResult","fonction","replace","join","textToCopy","navigator","clipboard","writeText","alert","href","margin","newExecutedActions","forEach","a","push","isActionExecuted","includes","isFunctionExecuted","some","key","disabled","justifyContent","gap","fontStyle","count","prevResults","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8b6a407e.chunk.js","sourcesContent":["var map = {\n\t\"./actionsData1.js\": [\n\t\t17,\n\t\t3\n\t],\n\t\"./actionsData2.js\": [\n\t\t18,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 14;\nmodule.exports = webpackAsyncContext;","import React, { useRef, useEffect } from 'react';\r\n\r\nconst HtmlDialog = ({ onSubmit }) => {\r\n  const textRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Mettre le focus sur le champ de texte lorsque le composant est monté\r\n    if (textRef.current) {\r\n      textRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const text = textRef.current.value;\r\n    onSubmit(text);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} >\r\n      <br />\r\n      <div>\r\n        <h2>\r\n          <label>Saisis ton idée ici</label>\r\n        </h2>\r\n      </div>\r\n      <textarea\r\n        ref={textRef}\r\n        rows=\"10\"\r\n        cols=\"90\"\r\n      />\r\n      <br /><br />\r\n      <button type=\"submit\" style={{ \r\n        padding: '10px 20px', \r\n        fontSize: '16px', \r\n        backgroundColor: '#4CAF50', \r\n        color: 'white', \r\n        border: 'none', \r\n        borderRadius: '4px', \r\n        cursor: 'pointer'\r\n      }}>\r\n        1. Sélectionne les actions que tu veux\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default HtmlDialog;\r\n","\nimport React, { useState, useEffect } from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport HtmlDialog from './HtmlDialog';\nimport './App.css';\n\nconst VariantDialog = ({ onSubmit }) => {\n  const [variantText, setVariantText] = useState('');\n\n  const handleSubmit = () => {\n    onSubmit(variantText);\n  };\n\n  return (\n    <div className=\"dialog\" style={{ display: 'flex', alignItems: 'center' }}>\n      <h3 style={{ marginRight: '10px' }}>Combien veux-tu de variantes :</h3>\n      <input\n        type=\"number\"\n        value={variantText}\n        onChange={(e) => setVariantText(e.target.value)}\n        style={{ marginRight: '10px', width: '50px' }}\n      />\n      <button onClick={handleSubmit}>OK</button>\n    </div>\n  );\n};\n\nfunction App() {\n  const [submittedText, setSubmittedText] = useState('');\n  const [selectedActions, setSelectedActions] = useState([]);\n  const [executedActions, setExecutedActions] = useState([]);\n  const [showActions, setShowActions] = useState(false);\n  const [displayResult, setDisplayResult] = useState(false);\n  const [variantDialogVisible, setVariantDialogVisible] = useState(false);\n  const [actionResults, setActionResults] = useState({});\n  const [variantCount, setVariantCount] = useState('');\n\n  const [actionsData, setActionsData] = useState([]);\n\n  useEffect(() => {\n    // Lire les paramètres de l'URL\n    const urlParams = new URLSearchParams(window.location.search);\n    // Obtenir la valeur du paramètre 'version' ou utiliser '1' par défaut\n    const version = urlParams.get('version') || '1';\n\n    // Importer dynamiquement le fichier actionsData correspondant à la version\n    import(`./actionsData${version}.js`).then(module => {\n      setActionsData(module.default);\n    }).catch(err => {\n      console.error('Failed to load actions data:', err);\n    });\n  }, []);\n\n  const handleSubmit = (text) => {\n    setSubmittedText(text);\n    setShowActions(true);\n    setDisplayResult(false);\n    console.log('Texte soumis :', text);\n  };\n\n  const handleCheckboxChange = (e) => {\n    const actionNo = parseInt(e.target.value);\n    if (e.target.checked) {\n      setSelectedActions([...selectedActions, actionNo]);\n    } else {\n      setSelectedActions(selectedActions.filter(no => no !== actionNo));\n    }\n  };\n\n  const handleActionsSubmit = (e) => {\n    e.preventDefault();\n    setShowActions(false);\n    setDisplayResult(true);\n    console.log('Actions demandées :', selectedActions);\n\n    const newExecutedActions = [...executedActions];\n\n    selectedActions.forEach(actionNo => {\n      const action = actionsData.find(a => a.no === actionNo);\n      if (action && action.fonction && functionsMap[action.fonction]) {\n        functionsMap[action.fonction](submittedText);\n      }\n      newExecutedActions.push(actionNo);\n    });\n\n    setExecutedActions(newExecutedActions);\n    setSelectedActions([]);\n  };\n\n  const proposeVariants = (text) => {\n    setVariantDialogVisible(true);\n  };\n\n  const handleVariantSubmit = (count) => {\n    setActionResults(prevResults => ({\n      ...prevResults,\n      proposeVariants: count,\n    }));\n    setVariantCount(count);\n    setVariantDialogVisible(false);\n  };\n\n  const copyToClipboard = () => {\n    let actionsChosen = executedActions.map((actionNo, index) => {\n      const action = actionsData.find(action => action.no === actionNo);\n      let actionResult = '';\n\n      if (action.fonction === 'proposeVariants' && variantCount) {\n        actionResult = `${variantCount} `;\n      } else if (action.fonction && actionResults[action.fonction]) {\n        actionResult = actionResults[action.fonction];\n      }\n\n      return `${index + 1}. ${action.action.replace('{n}', actionResult)}`;\n    }).join('\\n');\n\n    const textToCopy = `Idée soumise :\\n${submittedText}\\n\\nActions choisies :\\n${actionsChosen}\\n\\n--------------------------------------------------------------------------------------------------\\nAs-tu bien compris ?\\nY aurait-il quelque chose d’important que j’aurais oublié ?\\nDe quelles informations aurais-tu encore besoin pour mieux répondre à ma requête ?\\nPrends ton temps pour répondre, c’est la qualité de ta réponse qui prime.`;\n    navigator.clipboard.writeText(textToCopy).then(() => {\n      alert('BRAVO \\nTa demande est maintenant dans ton presse-papier.  \\n\\nTu peux la soumettre à ton IA préférée.  \\nMais n`oublie pas de vérifier la réponse avec une ou plusieurs autres IA, sinon gare aux hallucinations !\\n\\n2 avis valent mieux qu´un !');\n      window.location.href = 'https://sites.google.com/view/satia-prompt/s%C3%A9lection-ia';\n    });\n  };\n\n  const functionsMap = {\n    proposeVariants,\n  };\n\n  return (\n    <Router>\n      <div className=\"App three-column-margin\">\n        <HtmlDialog onSubmit={handleSubmit} />\n        {submittedText && (\n          <div>\n            <button type=\"button\" onClick={copyToClipboard} style={{ padding: '10px 20px', fontSize: '16px', margin: '10px 0' }}>3. Copie l'idée soumise et les actions à effectuer dans ton presse-papier</button>\n            <h2>Idée soumise :</h2>\n            <pre>{submittedText}</pre>\n          </div>\n        )}\n        {showActions && (\n          <div>\n            <h2>Actions disponibles :</h2>\n            <form onSubmit={handleActionsSubmit}>\n              {actionsData.map(action => {\n                const isActionExecuted = executedActions.includes(action.no);\n                const isFunctionExecuted = action.fonction && executedActions.some(no => actionsData.find(a => a.no === no && a.fonction === action.fonction));\n                return (\n                  <div key={action.no}>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        value={action.no}\n                        onChange={handleCheckboxChange}\n                        disabled={isActionExecuted || isFunctionExecuted}\n                      />\n                      {action.action.replace('{n}', actionResults[action.fonction] || '')}\n                    </label>\n                  </div>\n                );\n              })}\n              <hr />\n              <div style={{ display: 'flex', justifyContent: 'flex-start', gap: '10px', margin: '10px 0' }}>\n                <button type=\"submit\" style={{\n                  padding: '10px 20px',\n                  fontSize: '16px',\n                  backgroundColor: '#4CAF50',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer'\n                }}>\n                  2. Soumets les actions à effectuer\n                </button>\n                <div style={{ width: '30%', backgroundColor: '#f2f2f2', padding: '10px', fontStyle: 'italic' }}>\n                  Après avoir pressé sur le bouton 2,  <br />tu peux encore ajouter autant d'actions que tu le souhaites,  <br />il te suffit de presser sur le bouton 1\n                </div>\n              </div>\n            </form>\n          </div>\n        )}\n        {displayResult && (\n          <div>\n            <h2>Actions à effectuer :</h2>\n            <ol>\n              {executedActions.map((actionNo, index) => (\n                <li key={actionNo}>\n                  {actionsData.find(action => action.no === actionNo).action}\n                  {actionsData.find(action => action.no === actionNo).fonction && (\n                    <span>: {actionResults[actionsData.find(action => action.no === actionNo).fonction]}</span>\n                  )}\n                </li>\n              ))}\n            </ol>\n          </div>\n        )}\n        {variantDialogVisible && (\n          <VariantDialog\n            onSubmit={handleVariantSubmit}\n          />\n        )}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","\nimport { getCLS, getFID, getLCP, getFCP, getTTFB } from 'web-vitals';\n\n\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}