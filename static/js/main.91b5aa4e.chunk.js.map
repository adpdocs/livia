{"version":3,"sources":["HtmlDialog.js","actionsData.js","App.js","reportWebVitals.js","index.js"],"names":["HtmlDialog","_ref","onSubmit","textRef","useRef","useEffect","current","focus","React","createElement","e","preventDefault","text","value","ref","rows","cols","type","style","padding","fontSize","backgroundColor","color","border","borderRadius","cursor","actionsData","no","action","fonction","VariantDialog","onClose","variantText","setVariantText","useState","className","onChange","target","onClick","handleSubmit","LanguageDialog","_ref2","selectedLanguages","setSelectedLanguages","multiple","Array","from","selectedOptions","option","height","App","submittedText","setSubmittedText","selectedActions","setSelectedActions","executedActions","setExecutedActions","showActions","setShowActions","displayResult","setDisplayResult","variantDialogVisible","setVariantDialogVisible","languageDialogVisible","setLanguageDialogVisible","actionResults","setActionResults","handleCheckboxChange","actionNo","parseInt","checked","filter","functionsMap","proposeVariants","language","translateLanguages","Router","console","log","copyToClipboard","actionsChosen","map","index","find","actionResult","concat","join","textToCopy","navigator","clipboard","writeText","then","alert","margin","newExecutedActions","forEach","a","push","isActionExecuted","includes","isFunctionExecuted","some","key","disabled","handleEndClick","window","close","prevResults","languages","reportWebVitals","onPerfEntry","Function","Promise","resolve","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.91b5aa4e.chunk.js","sourcesContent":["\r\n\r\n// src/HtmlDialog.js\r\nimport React, { useRef, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst HtmlDialog = ({ onSubmit }) => {\r\n  const textRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Mettre le focus sur le champ de texte lorsque le composant est monté\r\n    if (textRef.current) {\r\n      textRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const text = textRef.current.value;\r\n    onSubmit(text);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <textarea\r\n        ref={textRef}\r\n        rows=\"10\"\r\n        cols=\"90\"\r\n      />\r\n      <br /><br />\r\n      <button type=\"submit\" style={{ \r\n        padding: '10px 20px', \r\n        fontSize: '16px', \r\n        backgroundColor: '#4CAF50', \r\n        color: 'white', \r\n        border: 'none', \r\n        borderRadius: '4px', \r\n        cursor: 'pointer'\r\n      }}>\r\n        Soumettre\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default HtmlDialog;\r\n\r\n","// src/actionsData.js\r\n\r\nconst actionsData = [\r\n    { no: 1, action: 'Reformule mieux le texte initial et de manière plus structurée', fonction: null },\r\n    { no: 2, action: 'Propose de nouvelles variantes plus fluides >>', fonction: 'proposeVariants' },\r\n    { no: 3, action: 'Transforme le texte en tableau thématique détaillé', fonction: null },\r\n    { no: 4, action: 'Décline en liste à puces les idées clés et les faits les plus importants', fonction: null },\r\n    { no: 5, action: 'Suggère des améliorations pour assurer la clarté du texte', fonction: null },\r\n    { no: 6, action: 'Transforme le texte en tableau thématique détaillé', fonction: null },\r\n    { no: 7, action: 'Décline en liste à puces avec les idées clés et les faits les plus importants', fonction: null },\r\n    { no: 8, action: 'Complète en cherchant des mises à jour liées à l’actualité', fonction: null },\r\n    { no: 9, action: 'Explique le texte à un enfant de 10 ans', fonction: null },\r\n    { no: 10, action: 'Identifie comment diagnostiquer avec précision les problèmes qui pourraient survenir', fonction: null },\r\n    { no: 11, action: 'Conçois des plans détaillés qui permettront de contourner les problèmes qui pourraient survenir. Comment faire le nécessaire pour pousser ces conceptions jusqu’à des résultats', fonction: null },\r\n    { no: 12, action: 'Ajoute une pointe d´humour et d´empathie', fonction: null },\r\n    { no: 13, action: 'Traduis le texte en anglais et en d´autres langues: >>', fonction: 'language' },\r\n    { no: 14, action: 'Développe l´idée principale sous plusieurs angles différents', fonction: null }\r\n   \r\n  ];\r\n  \r\n  export default actionsData;\r\n  ","// src/App.jsimport React, { useState } from 'react';\n// src/App.js\n// src/App.js\nimport React, { useState } from 'react';\nimport { HashRouter as Router } from 'react-router-dom'; // Importer HashRouter\nimport HtmlDialog from './HtmlDialog';\nimport actionsData from './actionsData'; // Assurez-vous que actionsData est exporté correctement d'un fichier séparé\nimport ReactDOM from 'react-dom';\n\n// Composant pour la fenêtre de saisie\nconst VariantDialog = ({ onSubmit, onClose }) => {\n  const [variantText, setVariantText] = useState('');\n\n  const handleSubmit = () => {\n    onSubmit(variantText);\n    onClose();\n  };\n\n  return (\n    <div className=\"dialog\">\n      <h2>Proposer plusieurs nouvelles variantes plus fluides:</h2>\n      <textarea\n        value={variantText}\n        onChange={(e) => setVariantText(e.target.value)}\n        rows=\"5\"\n        cols=\"50\"\n      />\n      <br />\n      <button onClick={handleSubmit}>Soumettre</button>\n      <button onClick={onClose}>Fermer</button>\n    </div>\n  );\n};\n\n// Composant pour la sélection des langues\nconst LanguageDialog = ({ onSubmit, onClose }) => {\n  const [selectedLanguages, setSelectedLanguages] = useState([]);\n\n  const handleSubmit = () => {\n    onSubmit(selectedLanguages);\n    onClose();\n  };\n\n  return (\n    <div className=\"dialog\">\n      <h2>Sélectionner les langues pour la traduction :</h2>\n      <select\n        multiple\n        value={selectedLanguages}\n        onChange={(e) => setSelectedLanguages(Array.from(e.target.selectedOptions, option => option.value))}\n        style={{ height: '150px' }}\n      >\n        <option value=\"anglais\">Anglais</option>\n        <option value=\"français\">Français</option>\n        <option value=\"espagnol\">Espagnol</option>\n        {/* Ajoutez d'autres langues selon vos besoins */}\n      </select>\n      <br />\n      <button onClick={handleSubmit}>Soumettre</button>\n      <button onClick={onClose}>Fermer</button>\n    </div>\n  );\n};\n\nfunction App() {\n  const [submittedText, setSubmittedText] = useState('');\n  const [selectedActions, setSelectedActions] = useState([]);\n  const [executedActions, setExecutedActions] = useState([]);\n  const [showActions, setShowActions] = useState(false);\n  const [displayResult, setDisplayResult] = useState(false);\n  const [variantDialogVisible, setVariantDialogVisible] = useState(false);\n  const [languageDialogVisible, setLanguageDialogVisible] = useState(false);\n  const [actionResults, setActionResults] = useState({});\n\n  const handleSubmit = (text) => {\n    setSubmittedText(text);\n    setShowActions(true);\n    setDisplayResult(false);\n    console.log('Texte soumis :', text);\n  };\n\n  const handleCheckboxChange = (e) => {\n    const actionNo = parseInt(e.target.value);\n    if (e.target.checked) {\n      setSelectedActions([...selectedActions, actionNo]);\n    } else {\n      setSelectedActions(selectedActions.filter(no => no !== actionNo));\n    }\n  };\n\n  const handleActionsSubmit = (e) => {\n    e.preventDefault();\n    setShowActions(false);\n    setDisplayResult(true);\n    console.log('Actions sélectionnées :', selectedActions);\n\n    const newExecutedActions = [...executedActions];\n\n    selectedActions.forEach(actionNo => {\n      const action = actionsData.find(a => a.no === actionNo);\n      if (action && action.fonction && functionsMap[action.fonction]) {\n        // Exécuter la fonction correspondante\n        functionsMap[action.fonction](submittedText);\n      }\n      newExecutedActions.push(actionNo);\n    });\n\n    setExecutedActions(newExecutedActions);\n    setSelectedActions([]); // Réinitialiser les actions sélectionnées après soumission\n  };\n\n  const handleEndClick = () => {\n    window.close();\n  };\n\n  const proposeVariants = (text) => {\n    setVariantDialogVisible(true);\n  };\n\n  const handleVariantSubmit = (text) => {\n    setActionResults(prevResults => ({\n      ...prevResults,\n      proposeVariants: text,\n    }));\n  };\n\n  const translateLanguages = () => {\n    setLanguageDialogVisible(true);\n  };\n\n  const handleLanguageSubmit = (languages) => {\n    // Traiter les langues sélectionnées ici (par exemple, appel à une API de traduction)\n    console.log('Langues sélectionnées :', languages);\n    // Vous pouvez implémenter la logique de traduction ici si nécessaire\n    // Pour l'exemple, nous stockons simplement les langues sélectionnées\n    setActionResults(prevResults => ({\n      ...prevResults,\n      language: languages.join(', '), // Format d'exemple pour stocker les langues\n    }));\n    setLanguageDialogVisible(false);\n  };\n\n  const copyToClipboard = () => {\n    let actionsChosen = executedActions.map((actionNo, index) => {\n      const action = actionsData.find(action => action.no === actionNo);\n      const actionResult = action.fonction ? actionResults[action.fonction] : '';\n      return `${index + 1}. ${action.action}${actionResult ? `: ${actionResult}` : ''}`;\n    }).join('\\n');\n\n    const textToCopy = `Texte soumis :\\n${submittedText}\\n\\nActions choisies :\\n${actionsChosen}`;\n    navigator.clipboard.writeText(textToCopy).then(() => {\n      alert('Texte soumis et actions choisies copiés dans le presse-papier !');\n    });\n  };\n\n  // Map des fonctions\n  const functionsMap = {\n    proposeVariants,\n    language: translateLanguages,\n  };\n\n  return (\n    <Router> {/* Envelopper l'application avec HashRouter */}\n      <div className=\"App\">\n        <HtmlDialog onSubmit={handleSubmit} />\n        {submittedText && (\n          <div>\n            <button type=\"button\" onClick={copyToClipboard} style={{ padding: '10px 20px', fontSize: '16px', margin: '10px 0' }}>Copie du texte soumis et des actions choisies dans le presse-papier</button>\n            <h2>Texte soumis :</h2>\n            <pre>{submittedText}</pre>\n          </div>\n        )}\n        {showActions && (\n          <div>\n            <h2>Actions disponibles :</h2>\n            <form onSubmit={handleActionsSubmit}>\n              {actionsData.map(action => {\n                const isActionExecuted = executedActions.includes(action.no);\n                const isFunctionExecuted = action.fonction && executedActions.some(no => actionsData.find(a => a.no === no && a.fonction === action.fonction));\n                return (\n                  <div key={action.no}>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        value={action.no}\n                        onChange={handleCheckboxChange}\n                        disabled={isActionExecuted || isFunctionExecuted}\n                      />\n                      {action.action}\n                    </label>\n                  </div>\n                );\n              })}\n              <hr /> {/* Ligne en dessous du bouton */}\n              <button type=\"submit\" style={{ padding: '10px 20px', fontSize: '16px', margin: '10px 0' }}>Soumettre les actions</button>\n            </form>\n            <button onClick={handleEndClick} style={{ padding: '10px 20px', fontSize: '16px', margin: '10px 0' }}>END</button>\n          </div>\n        )}\n        {displayResult && (\n          <div>\n            <h2>Actions choisies :</h2>\n            <ol>\n              {executedActions.map((actionNo, index) => (\n                <li key={actionNo}>\n                  {actionsData.find(action => action.no === actionNo).action}\n                  {actionsData.find(action => action.no === actionNo).fonction && (\n                    <span>: {actionResults[actionsData.find(action => action.no === actionNo).fonction]}</span>\n                  )}\n                </li>\n              ))}\n            </ol>\n          </div>\n        )}\n        {variantDialogVisible && (\n          <VariantDialog\n            onSubmit={handleVariantSubmit}\n            onClose={() => setVariantDialogVisible(false)}\n          />\n        )}\n        {languageDialogVisible && (\n          <LanguageDialog\n            onSubmit={handleLanguageSubmit}\n            onClose={() => setLanguageDialogVisible(false)}\n          />\n        )}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","\nimport { getCLS, getFID, getLCP, getFCP, getTTFB } from 'web-vitals';\n\n\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}